package rooms;

import interfaces.Interactable.InteractionResult;
import interfaces.Interactable.InteractionType;
import models.player.Player;
import java.util.List;
import java.util.ArrayList;
import java.util.Random;

/**
 * EmptyRoom.java
 * Representa una sala vac√≠a que puede contener elementos ambientales.
 * Extiende BaseRoom y proporciona funcionalidad espec√≠fica para salas vac√≠as.
 */
public class EmptyRoom extends BaseRoom {

    // Elementos ambientales de la sala
    private final List<String> ambientElements;
    private final List<String> flavorTexts;
    private final boolean hasSecrets;
    private final Random random;

    // Estado espec√≠fico de sala vac√≠a
    private boolean secretRevealed;
    private int searchAttempts;
    private final int maxSearchAttempts;

    /**
     * Constructor principal para crear una sala vac√≠a.
     *
     * @param name nombre de la sala
     * @param description descripci√≥n de la sala
     * @param hasSecrets si la sala tiene secretos ocultos
     */
    public EmptyRoom(String name, String description, boolean hasSecrets) {
        super(name, description, RoomType.EMPTY);
        this.hasSecrets = hasSecrets;
        this.secretRevealed = false;
        this.searchAttempts = 0;
        this.maxSearchAttempts = 3;
        this.random = new Random();
        this.ambientElements = new ArrayList<>();
        this.flavorTexts = new ArrayList<>();

        initializeAmbientElements();
        initializeFlavorTexts();

        // A√±adir tags espec√≠ficos
        addTag("explorable");
        if (hasSecrets) {
            addTag("mysterious");
        }
    }

    /**
     * Constructor simplificado para salas vac√≠as b√°sicas.
     */
    public EmptyRoom(String name, String description) {
        this(name, description, false);
    }

    /**
     * Inicializa elementos ambientales aleatorios.
     */
    private void initializeAmbientElements() {
        ambientElements.add("polvo flotando en rayos de luz");
        ambientElements.add("ecos distantes de actividad");
        ambientElements.add("sombras danzando en las paredes");
        ambientElements.add("un suave zumbido de servidores lejanos");
        ambientElements.add("el tenue brillo de monitores apagados");
        ambientElements.add("cables serpenteando por el suelo");
        ambientElements.add("libros de programaci√≥n abandonados");
        ambientElements.add("tazas de caf√© vac√≠as y olvidadas");
        ambientElements.add("notas Post-it con c√≥digo garabateado");
        ambientElements.add("el fantasma de commits pasados");
    }

    /**
     * Inicializa textos narrativos variados.
     */
    private void initializeFlavorTexts() {
        flavorTexts.add("El silencio aqu√≠ es diferente, como si los algoritmos susurraran secretos.");
        flavorTexts.add("Esta sala tiene el aroma caracter√≠stico de largos debugging sessions.");
        flavorTexts.add("Puedes sentir la presencia de c√≥digo que una vez vivi√≥ aqu√≠.");
        flavorTexts.add("Las paredes parecen guardar memorias de refactorizaciones √©picas.");
        flavorTexts.add("Hay algo reconfortante en la simplicidad de este espacio.");
        flavorTexts.add("El aire vibra con la energ√≠a de posibilidades no exploradas.");
        flavorTexts.add("Este lugar te recuerda que a veces, menos es m√°s.");
        flavorTexts.add("Sientes que algo importante sucedi√≥ aqu√≠, pero no puedes recordar qu√©.");
    }

    // ============ IMPLEMENTACI√ìN DE INTERACCI√ìN ============

    @Override
    protected InteractionResult executeRoomInteraction(Player player) {
        // Mostrar descripci√≥n base
        showRoomDescription();

        // A√±adir elementos ambientales
        showAmbientElements();

        // Verificar si hay secretos por descubrir
        if (hasSecrets && !secretRevealed) {
            return handleSecretSearch(player);
        }

        // Ofrecer descanso si el jugador est√° herido
        if (player.getStats().getHealth() < player.getStats().getMaxHealth()) {
            return offerRest(player);
        }

        // Experiencia por exploraci√≥n
        player.getStats().addExperience(5);

        return InteractionResult.success(
                "Has explorado completamente esta √°rea.",
                InteractionType.DIALOGUE
        );
    }

    /**
     * Muestra la descripci√≥n de la sala con elementos variables.
     */
    private void showRoomDescription() {
        System.out.println("üèöÔ∏è " + getDescription());

        // A√±adir texto narrativo aleatorio
        if (!flavorTexts.isEmpty()) {
            String flavorText = flavorTexts.get(random.nextInt(flavorTexts.size()));
            System.out.println("üí≠ " + flavorText);
        }
    }

    /**
     * Muestra elementos ambientales aleatorios.
     */
    private void showAmbientElements() {
        if (!ambientElements.isEmpty() && random.nextBoolean()) {
            String element = ambientElements.get(random.nextInt(ambientElements.size()));
            System.out.println("üëÅÔ∏è Notas: " + element);
        }
    }

    /**
     * Maneja la b√∫squeda de secretos en la sala.
     */
    private InteractionResult handleSecretSearch(Player player) {
        searchAttempts++;

        System.out.println("üîç Algo en esta sala llama tu atenci√≥n...");
        System.out.println("¬øQuieres buscar m√°s detalladamente? (s/n)");

        // En una implementaci√≥n real, esto vendr√≠a del input del usuario
        // Por ahora, simulamos una b√∫squeda autom√°tica
        boolean wantsToSearch = random.nextBoolean();

        if (wantsToSearch) {
            return performSecretSearch(player);
        } else {
            return InteractionResult.success(
                    "Decides que no vale la pena investigar m√°s por ahora.",
                    InteractionType.DIALOGUE
            );
        }
    }

    /**
     * Realiza la b√∫squeda de secretos.
     */
    private InteractionResult performSecretSearch(Player player) {
        System.out.println("üîç Buscas cuidadosamente por la sala...");

        // Probabilidad de encontrar el secreto aumenta con cada intento
        double successChance = 0.3 + (searchAttempts * 0.2);

        if (random.nextDouble() < successChance || searchAttempts >= maxSearchAttempts) {
            return revealSecret(player);
        } else {
            return InteractionResult.success(
                    "No encuentras nada especial esta vez. Tal vez con m√°s perseverancia...",
                    InteractionType.DIALOGUE
            );
        }
    }

    /**
     * Revela el secreto oculto de la sala.
     */
    private InteractionResult revealSecret(Player player) {
        secretRevealed = true;

        String secretMessage = generateSecretMessage();
        System.out.println("‚ú® " + secretMessage);

        // Recompensa por encontrar el secreto
        int experienceReward = 25;
        player.getStats().addExperience(experienceReward);

        // Peque√±a curaci√≥n como recompensa
        player.heal(10);

        // Cambiar el tag de la sala
        addTag("secret_found");

        return InteractionResult.success(
                "¬°Has descubierto un secreto oculto! Ganas " + experienceReward + " puntos de experiencia.",
                InteractionType.LOOT
        );
    }

    /**
     * Genera un mensaje de secreto aleatorio.
     */
    private String generateSecretMessage() {
        String[] secrets = {
                "¬°Encuentras una nota con un tip de programaci√≥n valioso!",
                "¬°Descubres un fragmento de c√≥digo elegante escrito en la pared!",
                "¬°Hallas un mensaje motivacional de un desarrollador anterior!",
                "¬°Encuentras una referencia a un patr√≥n de dise√±o √∫til!",
                "¬°Descubres una pista sobre las mejores pr√°cticas de clean code!",
                "¬°Hallas un easter egg dejado por el arquitecto del sistema!",
                "¬°Encuentras un mensaje sobre la importancia de los tests unitarios!",
                "¬°Descubres una reflexi√≥n sobre la evoluci√≥n del desarrollo de software!"
        };

        return secrets[random.nextInt(secrets.length)];
    }

    /**
     * Ofrece la posibilidad de descansar al jugador.
     */
    private InteractionResult offerRest(Player player) {
        System.out.println("üí§ Esta sala pac√≠fica parece un buen lugar para descansar.");
        System.out.println("¬øQuieres tomarte un momento para recuperarte? (s/n)");

        // Simulaci√≥n de respuesta (en implementaci√≥n real vendr√≠a del input)
        boolean wantsToRest = random.nextBoolean();

        if (wantsToRest) {
            return performRest(player);
        } else {
            return InteractionResult.success(
                    "Decides continuar tu aventura sin descansar.",
                    InteractionType.DIALOGUE
            );
        }
    }

    /**
     * Ejecuta el descanso del jugador.
     */
    private InteractionResult performRest(Player player) {
        System.out.println("üò¥ Te tomas un momento para descansar y reflexionar...");

        // Curaci√≥n gradual
        int healAmount = Math.min(20, player.getStats().getMaxHealth() - player.getStats().getHealth());

        if (healAmount > 0) {
            player.heal(healAmount);
            return InteractionResult.success(
                    "Te sientes m√°s descansado. Has recuperado " + healAmount + " puntos de vida.",
                    InteractionType.HEAL
            );
        } else {
            return InteractionResult.success(
                    "Ya te sientes completamente descansado.",
                    InteractionType.DIALOGUE
            );
        }
    }

    // ============ M√âTODOS ESPEC√çFICOS DE SALA VAC√çA ============

    /**
     * Verifica si la sala tiene secretos por descubrir.
     */
    public boolean hasUndiscoveredSecrets() {
        return hasSecrets && !secretRevealed;
    }

    /**
     * Obtiene el n√∫mero de intentos de b√∫squeda realizados.
     */
    public int getSearchAttempts() {
        return searchAttempts;
    }

    /**
     * Verifica si el secreto ha sido revelado.
     */
    public boolean isSecretRevealed() {
        return secretRevealed;
    }

    /**
     * A√±ade un elemento ambiental personalizado.
     */
    public void addAmbientElement(String element) {
        if (element != null && !element.trim().isEmpty()) {
            ambientElements.add(element.trim());
        }
    }

    /**
     * A√±ade un texto narrativo personalizado.
     */
    public void addFlavorText(String text) {
        if (text != null && !text.trim().isEmpty()) {
            flavorTexts.add(text.trim());
        }
    }

    // ============ M√âTODOS SOBRESCRITOS ============

    @Override
    protected void onFirstVisit(Player player) {
        super.onFirstVisit(player);
        System.out.println("üö∂ Entras cautelosamente en esta sala aparentemente vac√≠a...");
    }

    @Override
    protected void onSubsequentVisit(Player player) {
        super.onSubsequentVisit(player);

        if (secretRevealed) {
            System.out.println("‚ú® El secreto que descubriste antes a√∫n resuena en tu mente.");
        } else if (hasSecrets) {
            System.out.println("ü§î Todav√≠a sientes que hay algo m√°s que descubrir aqu√≠...");
        }
    }

    @Override
    public String getInteractionPrompt() {
        if (hasUndiscoveredSecrets()) {
            return "Presiona F para explorar " + getName() + " (puede haber secretos)";
        } else {
            return super.getInteractionPrompt();
        }
    }

    @Override
    public String getDetailedInfo() {
        StringBuilder info = new StringBuilder(super.getDetailedInfo());
        info.append("\nüîç Secretos: ").append(hasSecrets ? "S√≠" : "No");

        if (hasSecrets) {
            info.append("\nüéØ Secreto revelado: ").append(secretRevealed ? "S√≠" : "No");
            info.append("\nüî¢ Intentos de b√∫squeda: ").append(searchAttempts);
        }

        info.append("\nüåç Elementos ambientales: ").append(ambientElements.size());

        return info.toString();
    }

    // ============ FACTORY METHODS ============

    /**
     * Factory para crear salas vac√≠as predefinidas.
     */
    public static class EmptyRoomFactory {

        public static EmptyRoom createMainHall() {
            EmptyRoom room = new EmptyRoom(
                    "Sala Principal",
                    "Te encuentras en la sala principal de la mazmorra. Hay pasillos que se extienden en diferentes direcciones.",
                    false
            );
            room.addAmbientElement("un mapa del √°rea colgado en la pared");
            room.addFlavorText("Este es tu punto de partida. Desde aqu√≠, el mundo del c√≥digo se abre ante ti.");
            return room;
        }

        public static EmptyRoom createRestArea() {
            EmptyRoom room = new EmptyRoom(
                    "√Årea de Descanso",
                    "Una sala tranquila con c√≥modos asientos y una atmosfera relajante.",
                    false
            );
            room.addAmbientElement("cojines suaves dispuestos en c√≠rculo");
            room.addAmbientElement("plantas que purifican el aire");
            room.addFlavorText("Este lugar irradia paz y tranquilidad.");
            return room;
        }

        public static EmptyRoom createMysteriousHallway() {
            EmptyRoom room = new EmptyRoom(
                    "Pasillo Misterioso",
                    "Un largo pasillo que se extiende hacia la oscuridad. Algo especial se oculta aqu√≠.",
                    true
            );
            room.addAmbientElement("extra√±os s√≠mbolos tallados en las paredes");
            room.addAmbientElement("una corriente de aire fresco que viene de ninguna parte");
            room.addFlavorText("Los pasillos como este guardan los secretos m√°s profundos del c√≥digo.");
            return room;
        }

        public static EmptyRoom createAbandonedOffice() {
            EmptyRoom room = new EmptyRoom(
                    "Oficina Abandonada",
                    "Una oficina que alguna vez estuvo llena de actividad, ahora silenciosa.",
                    true
            );
            room.addAmbientElement("sillas giratorias que a√∫n se mueven ligeramente");
            room.addAmbientElement("monitores que parpadean ocasionalmente");
            room.addAmbientElement("un whiteboard con diagramas medio borrados");
            room.addFlavorText("Puedes imaginar a los desarrolladores que trabajaron aqu√≠, debuggeando hasta altas horas.");
            return room;
        }

        public static EmptyRoom createServerRoom() {
            EmptyRoom room = new EmptyRoom(
                    "Sala de Servidores Silenciosa",
                    "Una sala donde los servidores sol√≠an zumbar constantemente. Ahora todo est√° quieto.",
                    false
            );
            room.addAmbientElement("racks de servidores apagados");
            room.addAmbientElement("cables organizados con precisi√≥n militar");
            room.addAmbientElement("luces LED que parpadean d√©bilmente");
            room.addFlavorText("El coraz√≥n silencioso de la infraestructura digital.");
            return room;
        }

        public static EmptyRoom createLibraryCorner() {
            EmptyRoom room = new EmptyRoom(
                    "Rinc√≥n de la Biblioteca",
                    "Un acogedor rinc√≥n lleno de libros de programaci√≥n y documentaci√≥n t√©cnica.",
                    true
            );
            room.addAmbientElement("estanter√≠as repletas de manuales t√©cnicos");
            room.addAmbientElement("un sill√≥n de lectura muy usado");
            room.addAmbientElement("marcadores y notas entre las p√°ginas");
            room.addFlavorText("El conocimiento acumulado de generaciones de programadores descansa aqu√≠.");
            return room;
        }

        public static EmptyRoom createBreakRoom() {
            EmptyRoom room = new EmptyRoom(
                    "Sala de Descanso",
                    "La sala donde los desarrolladores toman sus merecidos breaks y recargan energ√≠as.",
                    false
            );
            room.addAmbientElement("una cafetera que a√∫n huele a caf√© reci√©n hecho");
            room.addAmbientElement("revistas t√©cnicas apiladas en una mesa");
            room.addAmbientElement("un sof√° c√≥modo con cojines hundidos");
            room.addFlavorText("El lugar donde nacen las mejores ideas, entre caf√© y conversaciones casuales.");
            return room;
        }

        public static EmptyRoom createTestingLab() {
            EmptyRoom room = new EmptyRoom(
                    "Laboratorio de Testing",
                    "Un espacio dedicado a las pruebas y la calidad del software.",
                    true
            );
            room.addAmbientElement("dispositivos de testing de diferentes √©pocas");
            room.addAmbientElement("cables de conexi√≥n cuidadosamente organizados");
            room.addAmbientElement("pantallas mostrando dashboards de m√©tricas");
            room.addFlavorText("Aqu√≠ se forja la confianza en el c√≥digo, test por test.");
            return room;
        }

        public static EmptyRoom createBrainstormingRoom() {
            EmptyRoom room = new EmptyRoom(
                    "Sala de Brainstorming",
                    "Una sala dise√±ada para la creatividad y la generaci√≥n de ideas.",
                    false
            );
            room.addAmbientElement("whiteboards cubiertos de diagramas y esquemas");
            room.addAmbientElement("post-its de colores pegados por todas partes");
            room.addAmbientElement("sillas m√≥viles dispuestas en c√≠rculo");
            room.addFlavorText("Las paredes han sido testigos de las mejores arquitecturas de software.");
            return room;
        }
    }

    // ============ M√âTODOS DE UTILIDAD ADICIONALES ============

    /**
     * Obtiene un elemento ambiental aleatorio.
     */
    public String getRandomAmbientElement() {
        if (ambientElements.isEmpty()) {
            return "silencio absoluto";
        }
        return ambientElements.get(random.nextInt(ambientElements.size()));
    }

    /**
     * Obtiene un texto narrativo aleatorio.
     */
    public String getRandomFlavorText() {
        if (flavorTexts.isEmpty()) {
            return "Un lugar tranquilo para reflexionar.";
        }
        return flavorTexts.get(random.nextInt(flavorTexts.size()));
    }

    /**
     * Establece un nuevo n√∫mero m√°ximo de intentos de b√∫squeda.
     */
    public void setMaxSearchAttempts(int maxAttempts) {
        // No se puede modificar el campo final, pero se puede documentar para futuras versiones
        System.out.println("‚ö†Ô∏è El n√∫mero m√°ximo de intentos est√° fijado en " + maxSearchAttempts);
    }

    /**
     * Reinicia el estado de b√∫squeda de secretos.
     */
    public void resetSecretSearch() {
        if (hasSecrets) {
            secretRevealed = false;
            searchAttempts = 0;
            tags.remove("secret_found");
            System.out.println("üîÑ El estado de b√∫squeda de secretos ha sido reiniciado.");
        }
    }

    /**
     * Fuerza la revelaci√≥n del secreto (para debugging).
     */
    public void forceRevealSecret(Player player) {
        if (hasSecrets && !secretRevealed) {
            revealSecret(player);
            System.out.println("üîß Secreto revelado por comando de desarrollador.");
        }
    }

    /**
     * Obtiene estad√≠sticas de la sala vac√≠a.
     */
    public String getRoomStatistics() {
        StringBuilder stats = new StringBuilder();
        stats.append("üìä Estad√≠sticas de ").append(getName()).append(":\n");
        stats.append("   üîç Tiene secretos: ").append(hasSecrets ? "S√≠" : "No").append("\n");
        stats.append("   ‚ú® Secreto revelado: ").append(secretRevealed ? "S√≠" : "No").append("\n");
        stats.append("   üéØ Intentos de b√∫squeda: ").append(searchAttempts).append("/").append(maxSearchAttempts).append("\n");
        stats.append("   üëÅÔ∏è Visitas: ").append(getVisitCount()).append("\n");
        stats.append("   üåç Elementos ambientales: ").append(ambientElements.size()).append("\n");
        stats.append("   üìù Textos narrativos: ").append(flavorTexts.size()).append("\n");
        stats.append("   üè∑Ô∏è Tags: ").append(getTags().size());

        return stats.toString();
    }
}